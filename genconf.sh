#!/bin/sh
# $Id; genconf.sh $
# -*- coding: iso-8859-1 -*-
#
# Author: Tomi Ollila -- too ät iki piste fi
#
#	Copyright (c) 2007 Tomi Ollila
#	    All rights reserved
#
# Created: Tue Mar 27 17:23:11 EEST 2007 too
# Last modified: Thu 16 Apr 2009 17:25:51 EEST too

# This script uses c compiler generated object files to figure
# out variable type sizes and machine endianess.
# C99 stdint.h could be used to figure out sizes of variable types
# but there is no (as far as I know) common way to figure out
# whether machine architecture is BIG ENDIAN or LITTLE ENDIAN.
#
# So, as we need to figure out endianess, why not figure out type
# sizes at the same time. C99 is nice, but not universally taken
# in use, yet.
#
# To examine generated object coded instead just creating and running
# program allows this to be used in cross-compiling environment.

# This particular script (genconf.sh) is public domain, use it as you wish.
# Standard disclaimers apply, no WARRANTY and such.

# use consistent locale -- for tr(1), at least...
LC_ALL=C LANG=C
export LC_ALL LANG

e2 () { echo "$@" >&2; }
ee () { e2 "$@"; exit 1; }

case $1 in '') ee Usage $0 '<cc-command> [cc-opts]';; esac

exec > conf_h.tmp

#rm () { :; } # for genconf.sh development

deltemps () { rm -f _test _test2 _test.c _test2.c; }
deltemps2 () { deltemps; rm -f conf_h.tmp; }
trap deltemps2 0

deltemps
cat > _test.c <<EOF
#include <fcntl.h>
#define prefix 0x767676, 0x616161, 0x6c6c6c, 0x20
long la[] = { 0x0a,
    prefix, (long)'c', 0x3d, sizeof (char) + 0x30, 0x0a,
    prefix, (long)'s', 0x3d, sizeof (short) + 0x30, 0x0a,
    prefix, (long)'i', 0x3d, sizeof (int) + 0x30, 0x0a,
    prefix, (long)'l', 0x3d, sizeof (long) + 0x30, 0x0a,
    prefix, (long)'L', 0x3d, sizeof (long long) + 0x30, 0x0a,
    prefix, (long)'p', 0x3d, sizeof (void*) + 0x30, 0x0a,
    prefix, (long)'O', 0x3d, sizeof (off_t) + 0x30, 0x0a,
};
EOF

"$@" -c -o _test _test.c
ts_c= ts_s= ts_i= ts_l= ts_L= ts_p= ts_O=
eval `tr -d '\000' < _test | strings | awk '/^vvvaaalll/{ print "ts_" $2 $3 }'`

case $ts_c in 1) ;; *) ee Need to have sizeof '(char)' == 1;; esac

matchsize ()
{
    case $1 in
	$ts_i) echo int ;;
	$ts_l) echo long ;;
	$ts_L) echo long long ;;
	$ts_s) echo short ;;
    esac
}

int16var=`matchsize 2`
int32var=`matchsize 4`
int64var=`matchsize 8`
psintvar=`matchsize $ts_p`

#case $int16var in '') ee Required 16 bit integer type not found ;; esac
case $int32var in '') ee Required 32 bit integer type not found ;; esac
#case $int64var in '') ee Required 64 bit integer type not found ;; esac
#case $psintvar in '') ee Required pointer sized integer type not found ;; esac

deltemps

cat > _test2.c <<EOF
$int32var ia[] = { 0x0a,
    0x626262, 0x797979, 0x6f6f6f, 0x727272, 0x20, 0x34333231, 0x0a };
EOF
#cat _test2.c >&2
"$@" -c -o _test2 _test2.c
eval `tr -d '\000' < _test2 | strings | awk '/^bbbyyyooorrr/{ print "bo="$2 }'`

case $bo in 1234|4321) ;; *) ee Byte order \"$bo\" not 1234 or 4321 ;; esac

cat <<EOF
/*
 * Generated by $0. Do not edit!
 */

/* Include this *after* system includes */

#ifndef CONF_H
#define CONF_H

#undef __BYTE_ORDER
#define __BYTE_ORDER    $bo
#undef __LITTLE_ENDIAN
#define __LITTLE_ENDIAN 1234
#undef __BIG_ENDIAN
#define __BIG_ENDIAN    4321

/* "exact" sized integer types */

typedef char eint8;
typedef unsigned char euint8;

typedef $int16var eint16;
typedef unsigned $int16var euint16;

typedef $int32var eint32;
typedef unsigned $int32var euint32;

typedef $int64var eint64;
typedef unsigned $int64var euint64;

/* psint is a variable type that has the same size as pointer variable */
typedef $psintvar psint;
typedef unsigned $psintvar psuint;
/*
 * NOTE: compiler can not do typechecking for i and p variables in macros below
 */
#define PSINT_TO_POINTER(i) ((void *)(i))
#define POINTER_TO_PSINT(p) ((psint)(p))

#define __SIZEOF_OFF_T  $ts_O

#endif /* CONF_H */

EOF

rm -f conf.h
mv conf_h.tmp conf.h
